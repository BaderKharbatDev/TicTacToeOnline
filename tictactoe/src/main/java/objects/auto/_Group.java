package objects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Group was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Group extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String GROUP_ID_PK_COLUMN = "GROUP_ID";

    public static final Property<Integer> PLAYER1ID = Property.create("player1Id", Integer.class);
    public static final Property<Integer> PLAYER2ID = Property.create("player2Id", Integer.class);
    public static final Property<Integer> P1 = Property.create("p1", Integer.class);
    public static final Property<Integer> P2 = Property.create("p2", Integer.class);
    public static final Property<Integer> P3 = Property.create("p3", Integer.class);
    public static final Property<Integer> P4 = Property.create("p4", Integer.class);
    public static final Property<Integer> P5 = Property.create("p5", Integer.class);
    public static final Property<Integer> P6 = Property.create("p6", Integer.class);
    public static final Property<Integer> P7 = Property.create("p7", Integer.class);
    public static final Property<Integer> P8 = Property.create("p8", Integer.class);
    public static final Property<Integer> P9 = Property.create("p9", Integer.class);
    public static final Property<Integer> LAST_TO_GO = Property.create("lastToGo", Integer.class);

    protected Integer player1Id;
    protected Integer player2Id;
    protected int p1;
    protected int p2;
    protected int p3;
    protected int p4;
    protected int p5;
    protected int p6;
    protected int p7;
    protected int p8;
    protected int p9;
    protected int lastToGo;


    public void setPlayer1Id(int player1Id) {
        beforePropertyWrite("player1Id", this.player1Id, player1Id);
        this.player1Id = player1Id;
    }

    public int getPlayer1Id() {
        beforePropertyRead("player1Id");
        if(this.player1Id == null) {
            return 0;
        }
        return this.player1Id;
    }

    public void setPlayer2Id(int player2Id) {
        beforePropertyWrite("player2Id", this.player2Id, player2Id);
        this.player2Id = player2Id;
    }

    public int getPlayer2Id() {
        beforePropertyRead("player2Id");
        if(this.player2Id == null) {
            return 0;
        }
        return this.player2Id;
    }

    public void setP1(int p1) {
        beforePropertyWrite("p1", this.p1, p1);
        this.p1 = p1;
    }

    public int getP1() {
        beforePropertyRead("p1");
        return this.p1;
    }

    public void setP2(int p2) {
        beforePropertyWrite("p2", this.p2, p2);
        this.p2 = p2;
    }

    public int getP2() {
        beforePropertyRead("p2");
        return this.p2;
    }

    public void setP3(int p3) {
        beforePropertyWrite("p3", this.p3, p3);
        this.p3 = p3;
    }

    public int getP3() {
        beforePropertyRead("p3");
        return this.p3;
    }

    public void setP4(int p4) {
        beforePropertyWrite("p4", this.p4, p4);
        this.p4 = p4;
    }

    public int getP4() {
        beforePropertyRead("p4");
        return this.p4;
    }

    public void setP5(int p5) {
        beforePropertyWrite("p5", this.p5, p5);
        this.p5 = p5;
    }

    public int getP5() {
        beforePropertyRead("p5");
        return this.p5;
    }

    public void setP6(int p6) {
        beforePropertyWrite("p6", this.p6, p6);
        this.p6 = p6;
    }

    public int getP6() {
        beforePropertyRead("p6");
        return this.p6;
    }

    public void setP7(int p7) {
        beforePropertyWrite("p7", this.p7, p7);
        this.p7 = p7;
    }

    public int getP7() {
        beforePropertyRead("p7");
        return this.p7;
    }

    public void setP8(int p8) {
        beforePropertyWrite("p8", this.p8, p8);
        this.p8 = p8;
    }

    public int getP8() {
        beforePropertyRead("p8");
        return this.p8;
    }

    public void setP9(int p9) {
        beforePropertyWrite("p9", this.p9, p9);
        this.p9 = p9;
    }

    public int getP9() {
        beforePropertyRead("p9");
        return this.p9;
    }

    public void setLastToGo(int lastToGo) {
        beforePropertyWrite("lastToGo", this.lastToGo, lastToGo);
        this.lastToGo = lastToGo;
    }

    public int getLastToGo() {
        beforePropertyRead("lastToGo");
        return this.lastToGo;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "player1Id":
                return this.player1Id;
            case "player2Id":
                return this.player2Id;
            case "p1":
                return this.p1;
            case "p2":
                return this.p2;
            case "p3":
                return this.p3;
            case "p4":
                return this.p4;
            case "p5":
                return this.p5;
            case "p6":
                return this.p6;
            case "p7":
                return this.p7;
            case "p8":
                return this.p8;
            case "p9":
                return this.p9;
            case "lastToGo":
                return this.lastToGo;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "player1Id":
                this.player1Id = (Integer)val;
                break;
            case "player2Id":
                this.player2Id = (Integer)val;
                break;
            case "p1":
                this.p1 = val == null ? 0 : (int)val;
                break;
            case "p2":
                this.p2 = val == null ? 0 : (int)val;
                break;
            case "p3":
                this.p3 = val == null ? 0 : (int)val;
                break;
            case "p4":
                this.p4 = val == null ? 0 : (int)val;
                break;
            case "p5":
                this.p5 = val == null ? 0 : (int)val;
                break;
            case "p6":
                this.p6 = val == null ? 0 : (int)val;
                break;
            case "p7":
                this.p7 = val == null ? 0 : (int)val;
                break;
            case "p8":
                this.p8 = val == null ? 0 : (int)val;
                break;
            case "p9":
                this.p9 = val == null ? 0 : (int)val;
                break;
            case "lastToGo":
                this.lastToGo = val == null ? 0 : (int)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.player1Id);
        out.writeObject(this.player2Id);
        out.writeInt(this.p1);
        out.writeInt(this.p2);
        out.writeInt(this.p3);
        out.writeInt(this.p4);
        out.writeInt(this.p5);
        out.writeInt(this.p6);
        out.writeInt(this.p7);
        out.writeInt(this.p8);
        out.writeInt(this.p9);
        out.writeInt(this.lastToGo);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.player1Id = (Integer)in.readObject();
        this.player2Id = (Integer)in.readObject();
        this.p1 = in.readInt();
        this.p2 = in.readInt();
        this.p3 = in.readInt();
        this.p4 = in.readInt();
        this.p5 = in.readInt();
        this.p6 = in.readInt();
        this.p7 = in.readInt();
        this.p8 = in.readInt();
        this.p9 = in.readInt();
        this.lastToGo = in.readInt();
    }

}
